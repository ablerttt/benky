{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Albert/Documents/UCLA 2019/Projects/flare/client/src/auth/Session/withAuthorization.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (!condition(authUser)) {\n          this.props.history.push(ROUTES.SIGN_IN);\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(AuthUserContext.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, authUser => condition(authUser) ? /*#__PURE__*/React.createElement(Component, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 31\n        }\n      })) : null);\n    }\n\n  }\n\n  return compose(withRouter, withFirebase)(WithAuthorization);\n};\n\nexport default withAuthorization;","map":{"version":3,"sources":["/mnt/c/Users/Albert/Documents/UCLA 2019/Projects/flare/client/src/auth/Session/withAuthorization.js"],"names":["React","withRouter","compose","AuthUserContext","withFirebase","ROUTES","withAuthorization","condition","Component","WithAuthorization","componentDidMount","listener","props","firebase","auth","onAuthStateChanged","authUser","history","push","SIGN_IN","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAAQC,YAAR,QAA2B,aAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;;AAEA,MAAMC,iBAAiB,GAAGC,SAAS,IAAIC,SAAS,IAAI;AAChD,QAAMC,iBAAN,SAAgCT,KAAK,CAACQ,SAAtC,CAAgD;AAC5CE,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CACZC,QAAQ,IAAI;AACR,YAAI,CAACT,SAAS,CAACS,QAAD,CAAd,EAA0B;AACtB,eAAKJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwBb,MAAM,CAACc,OAA/B;AACH;AACJ,OALW,CAAhB;AAOH;;AAEDC,IAAAA,oBAAoB,GAAG;AACnB,WAAKT,QAAL;AACH;;AAEDU,IAAAA,MAAM,GAAG;AACL,0BACI,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKL,QAAQ,IACLT,SAAS,CAACS,QAAD,CAAT,gBACM,oBAAC,SAAD,oBAAe,KAAKJ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADN,GAEM,IAJd,CADJ;AASH;;AAzB2C;;AA4BhD,SAAOV,OAAO,CACVD,UADU,EAEVG,YAFU,CAAP,CAGLK,iBAHK,CAAP;AAIH,CAjCD;;AAmCA,eAAeH,iBAAf","sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'recompose';\r\nimport AuthUserContext from './context';\r\nimport {withFirebase} from '../Firebase';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst withAuthorization = condition => Component => {\r\n    class WithAuthorization extends React.Component {\r\n        componentDidMount() {\r\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\r\n                authUser => {\r\n                    if (!condition(authUser)) {\r\n                        this.props.history.push(ROUTES.SIGN_IN);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.listener();\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <AuthUserContext.Consumer>\r\n                    {authUser =>\r\n                        condition(authUser) \r\n                            ? <Component {...this.props} /> \r\n                            : null\r\n                    }\r\n                </AuthUserContext.Consumer>\r\n            )\r\n        }\r\n    }\r\n\r\n    return compose(\r\n        withRouter, \r\n        withFirebase,\r\n    )(WithAuthorization);\r\n};\r\n\r\nexport default withAuthorization;"]},"metadata":{},"sourceType":"module"}